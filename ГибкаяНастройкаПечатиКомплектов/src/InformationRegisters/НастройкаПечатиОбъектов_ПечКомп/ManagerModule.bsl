#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает настройки комплекта печатных форм, используемых для объекта
//
// Параметры:
//  ТипОбъекта - Строка - полное наименование объекта, для которого необходимо получить настройки печатных форм
//  МассивСсылок - Массив из ЛюбаяСсылка - ссылки, для которых необходимо получить реквизиты
//  ВариантИспользования - Число - переменная, в которую помещается описание, для каких измерений применяется настройка.
//
// Возвращаемое значение:
// Неопределено, ТаблицаЗначений - таблица значений с колонками:
//  * Имя           - Строка - внутреннее имя печатной формы.
//  * Представление - Строка - пользовательской представление печатной формы.
//  * Экземпляров   - Число - количество экземпляров, выводимых на печать.
//  * Печатать      - Булево - признак, указывающий на необходимость печати печатной формы.
//  * Ссылка        - ЛюбаяСсылка
//
Функция КомплектПечатныхФорм(ТипОбъекта, Знач МассивСсылок, ВариантИспользования) Экспорт
	
	МенеджерРегистра = РегистрыСведений.НастройкиПечатиОбъектов;
	ТаблицаОбъектов = МенеджерРегистра.ТаблицаОбъектовДляПечатиКомплектно();
	ДобавитьКолонкиТаблицаОбъектов(ТаблицаОбъектов);
	ДополнитьДанныеТаблицаОбъектов(ТаблицаОбъектов);
	
	ТекущийОбъект = ТаблицаОбъектов.Найти(ТипОбъекта, "ТипОбъекта");
	ВариантИспользования = 0;
	
	Если ТекущийОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьОрганизация = ТекущийОбъект.ЕстьОрганизация И МассивСсылок <> Неопределено;
	ЕстьКонтрагент = ТекущийОбъект.ЕстьКонтрагент И МассивСсылок <> Неопределено;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОбъектыПечати.Ссылка КАК Ссылка"
		+ ?(ЕстьОрганизация,", ОбъектыПечати.Организация КАК Организация","")
		+ ?(ЕстьКонтрагент,", ОбъектыПечати.Контрагент","") + "
	|ПОМЕСТИТЬ ВТ_Ссылки
	|ИЗ
	|	" + ТипОбъекта + " КАК ОбъектыПечати
	|ГДЕ
	|	ОбъектыПечати.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПечатиОбъектов.Настройки КАК Настройки,
	|	1 КАК Порядок,
	|	ЕСТЬNULL(ВТ_Ссылки.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	NULL КАК Организация,
	|	NULL КАК Контрагент,
	|	НастройкиПечатиОбъектов.Идентификатор КАК Идентификатор,
	|	НастройкиПечатиОбъектов.Порядок КАК ПорядокНастройки,
	|	НастройкиПечатиОбъектов.НастройкиКомпоновки КАК НастройкиКомпоновки
	|ПОМЕСТИТЬ ВТ_НастройкиПечати
	|ИЗ
	|	РегистрСведений.НастройкаПечатиОбъектов_ПечКомп КАК НастройкиПечатиОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ссылки КАК ВТ_Ссылки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НастройкиПечатиОбъектов.ТипОбъекта = &ТипОбъекта
	|	И НастройкиПечатиОбъектов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НастройкиПечатиОбъектов.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	Если ЕстьОрганизация Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПечатиОбъектов.Настройки,
		|	2,
		|	ЕСТЬNULL(ВТ_Ссылки.Ссылка, НЕОПРЕДЕЛЕНО),
		|	NULL,
		|	НастройкиПечатиОбъектов.Контрагент,
		|	НастройкиПечатиОбъектов.Идентификатор КАК Идентификатор,
		|	НастройкиПечатиОбъектов.Порядок КАК ПорядокНастройки,
		|	НастройкиПечатиОбъектов.НастройкиКомпоновки КАК НастройкиКомпоновки
		|ИЗ
		|	РегистрСведений.НастройкаПечатиОбъектов_ПечКомп КАК НастройкиПечатиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ссылки КАК ВТ_Ссылки
		|		ПО (ВТ_Ссылки.Организация = НастройкиПечатиОбъектов.Организация)
		|ГДЕ
		|	НастройкиПечатиОбъектов.ТипОбъекта = &ТипОбъекта
		|	И НастройкиПечатиОбъектов.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	КонецЕсли;
	
	Если ЕстьКонтрагент Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПечатиОбъектов.Настройки,
		|	2,
		|	ЕСТЬNULL(ВТ_Ссылки.Ссылка, НЕОПРЕДЕЛЕНО),
		|	NULL,
		|	НастройкиПечатиОбъектов.ЕстьКонтрагент,
		|	НастройкиПечатиОбъектов.Контрагент,
		|	НастройкиПечатиОбъектов.Идентификатор КАК Идентификатор,
		|	НастройкиПечатиОбъектов.Порядок КАК ПорядокНастройки,
		|	НастройкиПечатиОбъектов.НастройкиКомпоновки КАК НастройкиКомпоновки
		|ИЗ
		|	РегистрСведений.НастройкаПечатиОбъектов_ПечКомп КАК НастройкиПечатиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ссылки КАК ВТ_Ссылки
		|		ПО (ВТ_Ссылки.ЕстьКонтрагент = НастройкиПечатиОбъектов.Контрагент)
		|ГДЕ
		|	НастройкиПечатиОбъектов.ТипОбъекта = &ТипОбъекта
		|	И НастройкиПечатиОбъектов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	
	Если ТекущийОбъект.ЕстьКонтрагент И ТекущийОбъект.ЕстьОрганизация И МассивСсылок <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПечатиОбъектов.Настройки,
		|	3,
		|	ЕСТЬNULL(ВТ_Ссылки.Ссылка, НЕОПРЕДЕЛЕНО),
		|	НастройкиПечатиОбъектов.Организация,
		|	НастройкиПечатиОбъектов.Контрагент,
		|	НастройкиПечатиОбъектов.Идентификатор КАК Идентификатор,
		|	НастройкиПечатиОбъектов.Порядок КАК ПорядокНастройки,
		|	НастройкиПечатиОбъектов.НастройкиКомпоновки КАК НастройкиКомпоновки
		|ИЗ
		|	РегистрСведений.НастройкаПечатиОбъектов_ПечКомп КАК НастройкиПечатиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ссылки КАК ВТ_Ссылки
		|		ПО (ВТ_Ссылки.Контрагент = НастройкиПечатиОбъектов.Контрагент)
		|			И (ВТ_Ссылки.Организация = НастройкиПечатиОбъектов.Организация)
		|ГДЕ
		|	НастройкиПечатиОбъектов.ТипОбъекта = &ТипОбъекта";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиПечатиСгруппированная.Ссылка КАК Ссылка,
	|	ВТ_НастройкиПечатиСгруппированная.Порядок КАК Порядок,
	|	ВТ_НастройкиПечати.Настройки,
	|	ВТ_НастройкиПечати.Идентификатор КАК Идентификатор,
	|	ВТ_НастройкиПечати.ПорядокНастройки КАК ПорядокНастройки,
	|	ВТ_НастройкиПечати.НастройкиКомпоновки КАК НастройкиКомпоновки
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВТ_НастройкиПечати.Порядок) КАК Порядок,
	|		ВТ_НастройкиПечати.Ссылка КАК Ссылка
	|	ИЗ
	|		ВТ_НастройкиПечати КАК ВТ_НастройкиПечати
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_НастройкиПечати.Ссылка) КАК ВТ_НастройкиПечатиСгруппированная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиПечати КАК ВТ_НастройкиПечати
	|		ПО ВТ_НастройкиПечатиСгруппированная.Порядок = ВТ_НастройкиПечати.Порядок
	|			И ВТ_НастройкиПечатиСгруппированная.Ссылка = ВТ_НастройкиПечати.Ссылка
	|	УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПорядокНастройки
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Если ТипЗнч(МассивСсылок) <> Тип("Массив") Тогда
		НовыйМассивСсылок = Новый Массив;
		НовыйМассивСсылок.Добавить(МассивСсылок);
		МассивСсылок = НовыйМассивСсылок;
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	РезультатЗапроса = Запрос.Выполнить();
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъекта);
	//@skip-check bsl-legacy-check-dynamic-feature-access
	КомплектПоУмолчанию = МенеджерОбъекта.КомплектПечатныхФорм();
	КоллекцияПечатныхФорм = МенеджерРегистра.ПодготовитьКомплектПечатныхФорм();
	
	// добавление внешних печатных форм в комплект
	ПрефиксВнешнихПечатныхФорм = "ВнешняяПечатнаяФорма.";
	
	ЗапросТаблицаКоманд = ДополнительныеОтчетыИОбработки.НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ТипОбъекта, Истина);
	ТаблицаКоманд = ЗапросТаблицаКоманд.Выполнить().Выгрузить();
	
	Для Каждого КомандаПечати Из ТаблицаКоманд Цикл
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПоУмолчанию, ПрефиксВнешнихПечатныхФорм + КомандаПечати.Идентификатор, КомандаПечати.Представление, 0);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Для Каждого ОбъектСсылка Из МассивСсылок Цикл
		ЕстьНастройки = Ложь;
		Пока Выборка.НайтиСледующий(ОбъектСсылка, "Ссылка") Цикл
			Если ОбъектСсылка <> Неопределено Тогда
				НастройкиКомпоновки = Выборка.НастройкиКомпоновки.Получить();
				Если СсылкаСоответствуетНастройкамКомпоновки(ТипОбъекта, ОбъектСсылка, НастройкиКомпоновки) Тогда
					НастройкиПечати = ПолучитьНастройкиПечатиПоВыборке(Выборка, ЕстьНастройки);
					Прервать;
				КонецЕсли;
			Иначе
				НастройкиПечати = ПолучитьНастройкиПечатиПоВыборке(Выборка, ЕстьНастройки);
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьНастройки Тогда
			НастройкиПечати = КомплектПоУмолчанию;
		КонецЕсли;

		НастройкиПечати.ЗаполнитьЗначения(ОбъектСсылка, "Ссылка");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НастройкиПечати, КоллекцияПечатныхФорм);
		Выборка.Сбросить();
	КонецЦикла;
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Порядок = 1 Или Выборка.Порядок = 2 Тогда
				ВариантИспользования = Выборка.Порядок;
			Иначе
				ВариантИспользования = 3;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоллекцияПечатныхФорм;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьДанныеТаблицаОбъектов(ТаблицаОбъектов)
	
	ТаблицаОбъектов.Колонки.Добавить("ЕстьКонтрагент", Новый ОписаниеТипов("Булево"));	

КонецПроцедуры

// считаем, что если есть партнер, то и контрагент тоже есть.  
Процедура ДобавитьКолонкиТаблицаОбъектов(ТаблицаОбъектов)
	
	Для Каждого Строка Из ТаблицаОбъектов Цикл
		Строка.ЕстьКонтрагент = Строка.ЕстьПартнер;
	КонецЦикла;

КонецПроцедуры

Функция СсылкаСоответствуетНастройкамКомпоновки(ТипОбъекта,СсылкаНаЭлемент,НастройкиКомпоновщика)

	Если ТипЗнч(НастройкиКомпоновщика) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат Истина;
	КонецЕсли;

	ЭлементОтбора = НастройкиКомпоновщика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = СсылкаНаЭлемент;

	Результат = Новый ТаблицаЗначений;

	ТекстЗапроса = ТекстЗапроса(ТипОбъекта);
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);

	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновщика);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	КомпоновщикНастроекКомпоновкиДанных.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат Результат.Количество() <> 0;

КонецФункции // СсылкаСоответсвуетСхемеКомпоновки()

Функция ТекстЗапроса(ИмяОбъекта) Экспорт

	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);

	ТекстЗапроса = "";

	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Реквизит.Имя;
	КонецЦикла;
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Реквизит.Имя;
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + ИмяТабличнойЧасти + ".(";

		СтрокаРеквизитов = "НомерСтроки";
		РеквизитыТабличнойЧасти = ТабличнаяЧасть.Реквизиты;
		Для Каждого Реквизит Из РеквизитыТабличнойЧасти Цикл
			Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
				СтрокаРеквизитов = СтрокаРеквизитов + "," + Символы.ПС;
			КонецЕсли;
			СтрокаРеквизитов = СтрокаРеквизитов + Реквизит.Имя;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов +"
		|)";
	КонецЦикла;

	ТекстЗапроса = "ВЫБРАТЬ " + ТекстЗапроса + Символы.ПС + "
	|ИЗ
	|	"+ ОбъектМетаданных.ПолноеИмя();

	Возврат ТекстЗапроса;

КонецФункции

Функция СхемаКомпоновкиДанных(ТекстЗапроса) Экспорт

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";

	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";

	Возврат СхемаКомпоновкиДанных;

КонецФункции

Процедура УстановитьНастройкуСтруктурыВыводаРезультата(Настройки) Экспорт

	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();

	ГруппировкаКомпоновкиДанных = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;

	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировки.Использование = Истина;

	ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеВыбора.Использование = Истина;

КонецПроцедуры

// Получить количество настроек печати.
//
// Возвращаемое значение:
//	Число - количество записей в регистре НастройкиПечатиОбъектов
Функция ПолучитьКоличествоНастроекПечати() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос=Новый Запрос;
	Запрос.Текст=
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	РегистрСведений.НастройкиПечатиОбъектов КАК НастройкиПечатиОбъектов";

	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Количество;

КонецФункции

Функция ПолучитьНастройкиПечатиПоВыборке(Знач Выборка, ЕстьНастройки)

	ЕстьНастройки = Истина;

	НастройкиПечати = Выборка.Настройки.Получить();
	НастройкиПечати.Колонки.Добавить("Ссылка");
	НастройкиПечати.Колонки.Добавить("Идентификатор");
	НастройкиПечати.ЗаполнитьЗначения(Выборка.Идентификатор, "Идентификатор");

	Возврат НастройкиПечати;

КонецФункции

// Удаляет настройки комплекта печатных форм, используемых для объекта
//
// Параметры:
// ТипОбъекта - строка - полное наименование объекта, для которого необходимо получить настройки печатных форм
// Организация - СправочникСсылка.Организации - организация, для которой необходимо удалить настройки
// Партнер - СправочникСсылка.Партнеры - партнер, для которого необходимо удалить настройки
// Контрагент - СправочникСсылка.Контрагенты - контрагент, для которого необходимо удалить настройки
// Идентификатор - Строка - идентификатор, для которого необходимо удалить настройки
Процедура УдалитьНастройкиПечатиОбъекта(ТипОбъекта, Организация, Контрагент, Идентификатор) Экспорт

	ЗаписьНастройкиПечатиОбъектов = СоздатьМенеджерЗаписи();
	ЗаписьНастройкиПечатиОбъектов.ТипОбъекта = ТипОбъекта;
	ЗаписьНастройкиПечатиОбъектов.Организация = Организация;
	ЗаписьНастройкиПечатиОбъектов.Контрагент = Контрагент;
	ЗаписьНастройкиПечатиОбъектов.Идентификатор = Идентификатор;
	ЗаписьНастройкиПечатиОбъектов.Удалить();

КонецПроцедуры

#КонецОбласти

#КонецЕсли
